/home/training/src/TestTokenWhaleChallenge.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | import {TokenWhaleChallenge} from "./TokenWhaleChallenge.sol";
  3 |     | 
  4 | *r  | contract TestTokenWhaleChallenge is TokenWhaleChallenge {
  5 |     |     address echidna = msg.sender;
  6 |     | 
  7 |     |     constructor() TokenWhaleChallenge(echidna) {}
  8 |     | 
  9 |     |     function echidna_test_isComplete() public view returns (bool) {
 10 |     |         return super.isComplete();
 11 |     |     }
 12 |     | }
 13 |     | 

/home/training/src/TokenWhaleChallenge.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | contract TokenWhaleChallenge {
  4 |     |     address player;
  5 |     | 
  6 |     |     uint256 public totalSupply;
  7 |     |     mapping(address => uint256) public balanceOf;
  8 |     |     mapping(address => mapping(address => uint256)) public allowance;
  9 |     | 
 10 |     |     string public name = "Simple ERC20 Token";
 11 |     |     string public symbol = "SET";
 12 |     |     uint8 public decimals = 18;
 13 |     | 
 14 |     |     constructor(address _player) {
 15 |     |         player = _player;
 16 |     |         totalSupply = 1000;
 17 |     |         balanceOf[player] = 1000;
 18 |     |     }
 19 |     | 
 20 |     |     function isComplete() public view returns (bool) {
 21 |     |         return balanceOf[player] >= 1000000;
 22 |     |     }
 23 |     | 
 24 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 25 |     | 
 26 | *   |     function _transfer(address to, uint256 value) internal {
 27 |     |         unchecked {
 28 | *   |             balanceOf[msg.sender] -= value;
 29 | *   |             balanceOf[to] += value;
 30 |     |         }
 31 |     | 
 32 | *   |         emit Transfer(msg.sender, to, value);
 33 |     |     }
 34 |     | 
 35 | *   |     function transfer(address to, uint256 value) public {
 36 | *r  |         require(balanceOf[msg.sender] >= value);
 37 | *   |         require(balanceOf[to] + value >= balanceOf[to]);
 38 |     | 
 39 | *   |         _transfer(to, value);
 40 |     |     }
 41 |     | 
 42 |     |     event Approval(
 43 |     |         address indexed owner,
 44 |     |         address indexed spender,
 45 |     |         uint256 value
 46 |     |     );
 47 |     | 
 48 | *   |     function approve(address spender, uint256 value) public {
 49 | *   |         allowance[msg.sender][spender] = value;
 50 | *   |         emit Approval(msg.sender, spender, value);
 51 |     |     }
 52 |     | 
 53 | *   |     function transferFrom(address from, address to, uint256 value) public {
 54 | *r  |         require(balanceOf[from] >= value);
 55 |     |         require(balanceOf[to] + value >= balanceOf[to]);
 56 |     |         require(allowance[from][msg.sender] >= value);
 57 |     |         unchecked {
 58 |     |             allowance[from][msg.sender] -= value;
 59 |     |         }
 60 |     |         _transfer(to, value);
 61 |     |     }
 62 |     | }
 63 |     | 

